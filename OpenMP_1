#include "stdafx.h"
#include <stdio.h>
#include <omp.h>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <time.h>
#define ll long long

using namespace std;

/*
* calculates (a * b) % c taking into account that a * b might overflow
*/

ll mulmod(ll a, ll b, ll mod)
{
	ll x = 0, y = a % mod;
	while (b > 0)
	{
		if (b % 2 == 1)
		{
			x = (x + y) % mod;
		}
		y = (y * 2) % mod;
		b /= 2;
	}
	return x % mod;
}

/*
* modular exponentiation
*/
ll modulo(ll base, ll exponent, ll mod)
{
	ll x = 1;
	ll y = base;
	while (exponent > 0)
	{
		if (exponent % 2 == 1)
			x = (x * y) % mod;
		y = (y * y) % mod;
		exponent = exponent / 2;
	}
	return x % mod;
}

/*
* Miller-Rabin primality test, iteration signifies the accuracy
*/
bool Miller(ll p, int iteration)
{
	if (p < 2)
	{
		return false;
	}
	if (p != 2 && p % 2 == 0)
	{
		return false;
	}

	ll s = p - 1;
	while (s % 2 == 0)
	{
		s /= 2;
	}
	for (int i = 0; i < iteration; i++)
	{
		ll a = rand() % (p - 1) + 1, temp = s;
		ll mod = modulo(a, temp, p);
		while (temp != p - 1 && mod != 1 && mod != p - 1)
		{
			mod = mulmod(mod, mod, p);
			temp *= 2;
		}
		if (mod != p - 1 && temp % 2 == 0)
		{
			return false;
		}
	}
	return true;
}

bool gcd(int num) {
	int i;
	for (i = 2; i < sqrt(num); i++) {
		if (num%i == 0)
			return false;
	}
	return true;
}

int main()
{
	clock_t start, finish;
	double total;
	int cnt = 0;
	int flag = 0;
	start = clock();
	int my_num_threads = 1;
#pragma omp parallel for num_threads(my_num_threads)
	for (int i = 2; i < 1000000; i++)
	{//gcd(i),Miller(i,10)
		if (gcd(i)){
			flag++;
			continue;
		}
		else {
			if (flag == 1 || flag == 0)
				continue;
			else
			{
				cnt++;
				flag = 0;
			}
		}
	}
	finish = clock();
	total = (double)(finish - start) / CLOCKS_PER_SEC;
	printf("使用线程数量：%d\n", my_num_threads);
	printf("用时 %lf 秒\n", total);
	printf("答案是：%d", cnt);
	system("pause");
	return 0;
}
